package com.example.chatlxt.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.chatlxt.Entity.DaoBean.Chat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT".
*/
public class ChatDao extends AbstractDao<Chat, Long> {

    public static final String TABLENAME = "CHAT";

    /**
     * Properties of entity Chat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CreateTime = new Property(1, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property FirstQuestion = new Property(2, String.class, "firstQuestion", false, "FIRST_QUESTION");
        public final static Property FirstAnswer = new Property(3, String.class, "firstAnswer", false, "FIRST_ANSWER");
        public final static Property Character = new Property(4, String.class, "character", false, "CHARACTER");
        public final static Property Prologue = new Property(5, String.class, "prologue", false, "PROLOGUE");
    }


    public ChatDao(DaoConfig config) {
        super(config);
    }
    
    public ChatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CREATE_TIME\" INTEGER," + // 1: createTime
                "\"FIRST_QUESTION\" TEXT," + // 2: firstQuestion
                "\"FIRST_ANSWER\" TEXT," + // 3: firstAnswer
                "\"CHARACTER\" TEXT," + // 4: character
                "\"PROLOGUE\" TEXT);"); // 5: prologue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Chat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(2, createTime);
        }
 
        String firstQuestion = entity.getFirstQuestion();
        if (firstQuestion != null) {
            stmt.bindString(3, firstQuestion);
        }
 
        String firstAnswer = entity.getFirstAnswer();
        if (firstAnswer != null) {
            stmt.bindString(4, firstAnswer);
        }
 
        String character = entity.getCharacter();
        if (character != null) {
            stmt.bindString(5, character);
        }
 
        String prologue = entity.getPrologue();
        if (prologue != null) {
            stmt.bindString(6, prologue);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Chat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(2, createTime);
        }
 
        String firstQuestion = entity.getFirstQuestion();
        if (firstQuestion != null) {
            stmt.bindString(3, firstQuestion);
        }
 
        String firstAnswer = entity.getFirstAnswer();
        if (firstAnswer != null) {
            stmt.bindString(4, firstAnswer);
        }
 
        String character = entity.getCharacter();
        if (character != null) {
            stmt.bindString(5, character);
        }
 
        String prologue = entity.getPrologue();
        if (prologue != null) {
            stmt.bindString(6, prologue);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Chat readEntity(Cursor cursor, int offset) {
        Chat entity = new Chat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // createTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // firstQuestion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // firstAnswer
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // character
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // prologue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Chat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreateTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFirstQuestion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFirstAnswer(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCharacter(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrologue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Chat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Chat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Chat entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
